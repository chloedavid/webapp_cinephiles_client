<?php
/**
 * Adherent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Association de cinéphile
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Adherent Class Doc Comment
 *
 * @category    Class
 * @description Adhérent
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Adherent implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'adherent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'est_association' => 'bool',
        'id' => 'int',
        'nom' => 'string',
        'prenom' => 'string',
        'date_naissance' => 'object',
        'email' => 'string',
        'login' => 'string',
        'mdp' => 'string',
        'photo' => 'string',
        'categories' => 'object[]',
        'seances' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'est_association' => null,
        'id' => null,
        'nom' => null,
        'prenom' => null,
        'date_naissance' => null,
        'email' => null,
        'login' => null,
        'mdp' => null,
        'photo' => null,
        'categories' => null,
        'seances' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'est_association' => 'estAssociation',
        'id' => 'id',
        'nom' => 'nom',
        'prenom' => 'prenom',
        'date_naissance' => 'dateNaissance',
        'email' => 'email',
        'login' => 'login',
        'mdp' => 'mdp',
        'photo' => 'photo',
        'categories' => 'categories',
        'seances' => 'seances'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'est_association' => 'setEstAssociation',
        'id' => 'setId',
        'nom' => 'setNom',
        'prenom' => 'setPrenom',
        'date_naissance' => 'setDateNaissance',
        'email' => 'setEmail',
        'login' => 'setLogin',
        'mdp' => 'setMdp',
        'photo' => 'setPhoto',
        'categories' => 'setCategories',
        'seances' => 'setSeances'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'est_association' => 'getEstAssociation',
        'id' => 'getId',
        'nom' => 'getNom',
        'prenom' => 'getPrenom',
        'date_naissance' => 'getDateNaissance',
        'email' => 'getEmail',
        'login' => 'getLogin',
        'mdp' => 'getMdp',
        'photo' => 'getPhoto',
        'categories' => 'getCategories',
        'seances' => 'getSeances'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['est_association'] = isset($data['est_association']) ? $data['est_association'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['nom'] = isset($data['nom']) ? $data['nom'] : null;
        $this->container['prenom'] = isset($data['prenom']) ? $data['prenom'] : null;
        $this->container['date_naissance'] = isset($data['date_naissance']) ? $data['date_naissance'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['mdp'] = isset($data['mdp']) ? $data['mdp'] : null;
        $this->container['photo'] = isset($data['photo']) ? $data['photo'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['seances'] = isset($data['seances']) ? $data['seances'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets est_association
     * @return bool
     */
    public function getEstAssociation()
    {
        return $this->container['est_association'];
    }

    /**
     * Sets est_association
     * @param bool $est_association
     * @return $this
     */
    public function setEstAssociation($est_association)
    {
        $this->container['est_association'] = $est_association;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nom
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     * @param string $nom
     * @return $this
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets prenom
     * @return string
     */
    public function getPrenom()
    {
        return $this->container['prenom'];
    }

    /**
     * Sets prenom
     * @param string $prenom
     * @return $this
     */
    public function setPrenom($prenom)
    {
        $this->container['prenom'] = $prenom;

        return $this;
    }

    /**
     * Gets date_naissance
     * @return object
     */
    public function getDateNaissance()
    {
        return $this->container['date_naissance'];
    }

    /**
     * Sets date_naissance
     * @param object $date_naissance
     * @return $this
     */
    public function setDateNaissance($date_naissance)
    {
        $this->container['date_naissance'] = $date_naissance;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets login
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     * @param string $login
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets mdp
     * @return string
     */
    public function getMdp()
    {
        return $this->container['mdp'];
    }

    /**
     * Sets mdp
     * @param string $mdp
     * @return $this
     */
    public function setMdp($mdp)
    {
        $this->container['mdp'] = $mdp;

        return $this;
    }

    /**
     * Gets photo
     * @return string
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     * @param string $photo
     * @return $this
     */
    public function setPhoto($photo)
    {
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets categories
     * @return object[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     * @param object[] $categories
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets seances
     * @return object[]
     */
    public function getSeances()
    {
        return $this->container['seances'];
    }

    /**
     * Sets seances
     * @param object[] $seances
     * @return $this
     */
    public function setSeances($seances)
    {
        $this->container['seances'] = $seances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


