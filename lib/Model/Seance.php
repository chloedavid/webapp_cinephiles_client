<?php
/**
 * Seance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Association de cinéphile
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Seance Class Doc Comment
 *
 * @category    Class
 * @description Séance
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Seance implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'seance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'date' => 'object',
        'a_expire' => 'bool',
        'avis' => 'string',
        'date_avis' => 'object',
        'film' => 'object',
        'cinema' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'date' => null,
        'a_expire' => null,
        'avis' => null,
        'date_avis' => null,
        'film' => null,
        'cinema' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date' => 'date',
        'a_expire' => 'aExpire',
        'avis' => 'avis',
        'date_avis' => 'dateAvis',
        'film' => 'film',
        'cinema' => 'cinema'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date' => 'setDate',
        'a_expire' => 'setAExpire',
        'avis' => 'setAvis',
        'date_avis' => 'setDateAvis',
        'film' => 'setFilm',
        'cinema' => 'setCinema'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date' => 'getDate',
        'a_expire' => 'getAExpire',
        'avis' => 'getAvis',
        'date_avis' => 'getDateAvis',
        'film' => 'getFilm',
        'cinema' => 'getCinema'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['a_expire'] = isset($data['a_expire']) ? $data['a_expire'] : null;
        $this->container['avis'] = isset($data['avis']) ? $data['avis'] : null;
        $this->container['date_avis'] = isset($data['date_avis']) ? $data['date_avis'] : null;
        $this->container['film'] = isset($data['film']) ? $data['film'] : null;
        $this->container['cinema'] = isset($data['cinema']) ? $data['cinema'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     * @return object
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param object $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets a_expire
     * @return bool
     */
    public function getAExpire()
    {
        return $this->container['a_expire'];
    }

    /**
     * Sets a_expire
     * @param bool $a_expire
     * @return $this
     */
    public function setAExpire($a_expire)
    {
        $this->container['a_expire'] = $a_expire;

        return $this;
    }

    /**
     * Gets avis
     * @return string
     */
    public function getAvis()
    {
        return $this->container['avis'];
    }

    /**
     * Sets avis
     * @param string $avis
     * @return $this
     */
    public function setAvis($avis)
    {
        $this->container['avis'] = $avis;

        return $this;
    }

    /**
     * Gets date_avis
     * @return object
     */
    public function getDateAvis()
    {
        return $this->container['date_avis'];
    }

    /**
     * Sets date_avis
     * @param object $date_avis
     * @return $this
     */
    public function setDateAvis($date_avis)
    {
        $this->container['date_avis'] = $date_avis;

        return $this;
    }

    /**
     * Gets film
     * @return object
     */
    public function getFilm()
    {
        return $this->container['film'];
    }

    /**
     * Sets film
     * @param object $film
     * @return $this
     */
    public function setFilm($film)
    {
        $this->container['film'] = $film;

        return $this;
    }

    /**
     * Gets cinema
     * @return object
     */
    public function getCinema()
    {
        return $this->container['cinema'];
    }

    /**
     * Sets cinema
     * @param object $cinema
     * @return $this
     */
    public function setCinema($cinema)
    {
        $this->container['cinema'] = $cinema;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


