<?php
/**
 * Cinema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Association de cinéphile
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Cinema Class Doc Comment
 *
 * @category    Class
 * @description Cinéma
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Cinema implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'cinema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'nom' => 'string',
        'logo' => 'string',
        'pays' => 'string',
        'ville' => 'string',
        'codepostal' => 'string',
        'rue' => 'string',
        'complement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'nom' => null,
        'logo' => null,
        'pays' => null,
        'ville' => null,
        'codepostal' => null,
        'rue' => null,
        'complement' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'nom' => 'nom',
        'logo' => 'logo',
        'pays' => 'pays',
        'ville' => 'ville',
        'codepostal' => 'codepostal',
        'rue' => 'rue',
        'complement' => 'complement'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'nom' => 'setNom',
        'logo' => 'setLogo',
        'pays' => 'setPays',
        'ville' => 'setVille',
        'codepostal' => 'setCodepostal',
        'rue' => 'setRue',
        'complement' => 'setComplement'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'nom' => 'getNom',
        'logo' => 'getLogo',
        'pays' => 'getPays',
        'ville' => 'getVille',
        'codepostal' => 'getCodepostal',
        'rue' => 'getRue',
        'complement' => 'getComplement'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['nom'] = isset($data['nom']) ? $data['nom'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['pays'] = isset($data['pays']) ? $data['pays'] : null;
        $this->container['ville'] = isset($data['ville']) ? $data['ville'] : null;
        $this->container['codepostal'] = isset($data['codepostal']) ? $data['codepostal'] : null;
        $this->container['rue'] = isset($data['rue']) ? $data['rue'] : null;
        $this->container['complement'] = isset($data['complement']) ? $data['complement'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets nom
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     * @param string $nom
     * @return $this
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets logo
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     * @param string $logo
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets pays
     * @return string
     */
    public function getPays()
    {
        return $this->container['pays'];
    }

    /**
     * Sets pays
     * @param string $pays
     * @return $this
     */
    public function setPays($pays)
    {
        $this->container['pays'] = $pays;

        return $this;
    }

    /**
     * Gets ville
     * @return string
     */
    public function getVille()
    {
        return $this->container['ville'];
    }

    /**
     * Sets ville
     * @param string $ville
     * @return $this
     */
    public function setVille($ville)
    {
        $this->container['ville'] = $ville;

        return $this;
    }

    /**
     * Gets codepostal
     * @return string
     */
    public function getCodepostal()
    {
        return $this->container['codepostal'];
    }

    /**
     * Sets codepostal
     * @param string $codepostal
     * @return $this
     */
    public function setCodepostal($codepostal)
    {
        $this->container['codepostal'] = $codepostal;

        return $this;
    }

    /**
     * Gets rue
     * @return string
     */
    public function getRue()
    {
        return $this->container['rue'];
    }

    /**
     * Sets rue
     * @param string $rue
     * @return $this
     */
    public function setRue($rue)
    {
        $this->container['rue'] = $rue;

        return $this;
    }

    /**
     * Gets complement
     * @return string
     */
    public function getComplement()
    {
        return $this->container['complement'];
    }

    /**
     * Sets complement
     * @param string $complement
     * @return $this
     */
    public function setComplement($complement)
    {
        $this->container['complement'] = $complement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


